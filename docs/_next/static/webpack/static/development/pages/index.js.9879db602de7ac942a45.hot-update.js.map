{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.9879db602de7ac942a45.hot-update.js","sources":["webpack:///./contents/contact/contact.js"],"sourcesContent":["import React from 'react'\r\nimport { MainInner } from '../../components/layout'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck, faEnvelope, faSpinner } from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios'\r\n\r\nclass Contact extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      formData: {\r\n        contactName: '',\r\n        contactEmail: '',\r\n        contactSubject: '',\r\n        contactMessage: ''\r\n      },\r\n      submitting: false,\r\n      submitted: false,\r\n      error: null\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.submitForm = this.submitForm.bind(this)\r\n  }\r\n\r\n  handleChange (e) {\r\n    const formData = { ...this.state.formData }\r\n    formData[e.target.name] = e.target.type === 'checkbox' ? e.target.checked : e.target.value\r\n    this.setState({\r\n      formData\r\n    })\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n    this.setState({\r\n      submitting: true\r\n    }, this.submitForm)\r\n  }\r\n\r\n  handleErrorSubmit = (e, formData, errorInputs) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    console.error(errorInputs)\r\n  }\r\n\r\n  submitForm () {\r\n    const data = {\r\n      contactName: this.state.formData.contactName,\r\n      contactEmail: this.state.formData.contactEmail,\r\n      contactSubject: this.state.formData.contactSubject,\r\n      contactMessage: this.state.formData.contactMessage\r\n    }\r\n\r\n    const options = {\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n\r\n    axios.post('https://usebasin.com/f/15cd09ff88a6.json', data, options)\r\n      .then((response) => {\r\n        console.log('Sent:', response)\r\n        this.setState({\r\n          submitting: false,\r\n          submitted: true,\r\n          error: null\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        console.log('Failed:', error)\r\n        this.setState({\r\n          submitting: false,\r\n          submitted: false,\r\n          error: error\r\n        })\r\n      })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <MainInner id='contact' title='Contact' fluid>\r\n        <div className='row section-head'>\r\n          <div className='width20'>\r\n            <FontAwesomeIcon icon={faEnvelope} className='contact-icon' />\r\n          </div>\r\n          <div className='width80'>\r\n            <p className='lead'>You can use the below form to contact me with any queries you have.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <form id='contactForm' name='contactForm' onSubmit={this.handleSubmit} onErrorSubmit={this.handleErrorSubmit}>\r\n            <div className='form-group'>\r\n              <label htmlFor='contactName'>Name <span className='required'>*</span></label>\r\n              <input type='text' size='35' id='contactName' name='contactName' required value={this.state.formData.contactName} onChange={this.handleChange} />\r\n            </div>\r\n            <div className='form-group'>\r\n              <label htmlFor='contactEmail'>Email <span className='required'>*</span></label>\r\n              <input type='text' size='35' id='contactEmail' name='contactEmail' required value={this.state.formData.contactEmail} onChange={this.handleChange} />\r\n            </div>\r\n            <div className='form-group'>\r\n              <label htmlFor='contactSubject'>Subject</label>\r\n              <input type='text' size='35' id='contactSubject' name='contactSubject' required value={this.state.formData.contactSubject} onChange={this.handleChange} />\r\n            </div>\r\n            <div className='form-group'>\r\n              <label htmlFor='contactMessage'>Message <span className='required'>*</span></label>\r\n              <textarea cols='50' rows='15' id='contactMessage' name='contactMessage' required value={this.state.formData.contactMessage} onChange={this.handleChange} />\r\n            </div>\r\n            <div className='form-group'>\r\n              <div className='form-group-submit'>\r\n                <button id='contactSubmit' className='btn btn-primary'>Submit</button>\r\n                {this.state.submitting &&\r\n                  <span id='image-loader'>\r\n                    <FontAwesomeIcon icon={faSpinner} spin className='spinner-icon' />\r\n                  </span>}\r\n                {this.state.error &&\r\n                  <div id='message-warning'>{this.state.error}</div>}\r\n                {this.state.submitted &&\r\n                  <div id='message-success'>\r\n                    <FontAwesomeIcon icon={faCheck} className='check-icon' /> Your message was sent, thank you!\r\n                    <br />\r\n                  </div>}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </MainInner>\r\n    )\r\n  }\r\n}\r\n\r\nexport { Contact }\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAkCA;AACA;AACA;AACA;AACA;AApCA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AATA;AAWA;AACA;AACA;AAfA;AAgBA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAQA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAFA;AADA;AAOA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AA5HA;AACA;;;;;A","sourceRoot":""}